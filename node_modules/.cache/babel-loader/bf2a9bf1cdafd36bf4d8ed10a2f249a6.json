{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"trainer__layout\"\n};\nconst _hoisted_2 = {\n  class: \"trainer__layout-trainer\"\n};\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"p\", {\n  class: \"trainer__layout-trainer-question\"\n}, [/*#__PURE__*/_createTextVNode(\" What is the \"), /*#__PURE__*/_createElementVNode(\"br\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"trainer__layout-trainer-question\",\n  style: {\n    \"font-style\": \"italic\"\n  }\n}, \" past participle \"), /*#__PURE__*/_createTextVNode(\" of: \")], -1\n/* HOISTED */\n);\n\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"trainer__layout-trainer-question\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_5 = {\n  class: \"trainer__layout-trainer-counter\"\n};\n\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"progress\"\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  role: \"progressbar\",\n  class: \"progress-bar bg-success progress-bar-striped\",\n  style: {\n    \"width\": \"5%\"\n  },\n  \"aria-valuenow\": \"5\",\n  \"aria-valuemin\": \"0\",\n  \"aria-valuemax\": \"100\"\n})], -1\n/* HOISTED */\n);\n\nconst _hoisted_7 = {\n  class: \"trainer__layout-trainer-word\"\n};\nconst _hoisted_8 = {\n  for: \"trainer-input\"\n};\n\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"trainer__layout-trainer-dev_field\"\n}, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _hoisted_4, _createElementVNode(\"div\", _hoisted_5, _toDisplayString($setup.currentWord + 1) + \" of \" + _toDisplayString($setup.randomWordArray.length), 1\n  /* TEXT */\n  ), _hoisted_6, _createElementVNode(\"div\", _hoisted_7, _toDisplayString($setup.randomWordArray[$setup.currentWord].present), 1\n  /* TEXT */\n  ), _createElementVNode(\"label\", _hoisted_8, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    class: \"trainer__layout-trainer-input\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.myAnswer = $event),\n    id: \"trainer-input\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $setup.myAnswer]])]), _createCommentVNode(\" onkeypress=\\\"enterKeyPressed(event)\\\" \"), _createElementVNode(\"div\", {\n    class: \"trainer__layout-trainer-submit\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $setup.checkAnswer && $setup.checkAnswer(...args))\n  }, \" Submit \"), _createElementVNode(\"div\", {\n    class: \"trainer__layout-trainer-answer\",\n    style: _normalizeStyle({\n      color: $setup.answerColor\n    })\n  }, null, 4\n  /* STYLE */\n  ), _hoisted_9])]);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;;;EACJA,KAAK,EAAC;;;gCACTC,oBAMI,GANJ,EAMI;EANDD,KAAK,EAAC;AAML,CANJ,EAA2C,+BAAC,gBAAD,eAC7BC,oBAAI,IAAJ,CAD6B,eAEzCA,oBAEO,MAFP,EAEO;EAFDD,KAAK,EAAC,kCAEL;EAFwCE,KAA2B,EAA3B;IAAA;EAAA;AAExC,CAFP,EAA2E,mBAA3E,CAFyC,gCAIlC,QAJkC,CAA3C;;AAAA;;gCAOED,oBACO,MADP,EACO;EADDD,KAAK,EAAC;AACL,CADP,EAA8C,IAA9C,EAA8C;AAAA;AAA9C;;;EAEGA,KAAK,EAAC;;;gCAIXC,oBAWM,KAXN,EAWM;EAXDD,KAAK,EAAC;AAWL,CAXN,EAAqB,cACnBC,oBASM,KATN,EASM;EARJE,IAAI,EAAC,aAQD;EAPJH,KAAK,EAAC,8CAOF;EALJE,KAAkB,EAAlB;IAAA;EAAA,CAKI;EAJJ,iBAAc,GAIV;EAHJ,iBAAc,GAGV;EAFJ,iBAAc;AAEV,CATN,CADmB,CAArB;;AAAA;;;EAYKF,KAAK,EAAC;;;EAIJI,GAAG,EAAC;;;gCAkBXH,oBAEM,KAFN,EAEM;EAFDD,KAAK,EAAC;AAEL,CAFN,EAA8C,IAA9C,EAA8C;AAAA;AAA9C;;;uBAjDJK,oBAuDM,KAvDN,cAuDM,CAtDJJ,oBAoDM,KApDN,cAoDM,CAnDJK,UAmDI,EA5CFC,UA4CE,EA1CJN,oBAGM,KAHN,cAGMO,iBAFDC,qBAAW,CAEV,IAFiB,MAEjB,GAFqBD,iBAAGC,uBAAgBC,MAAnB,CAD3B,EACoD;EAAA;EADpD,CA0CI,EAtCJC,UAsCI,EA1BJV,oBAGM,KAHN,cAGMO,iBAFDC,uBAAgBA,kBAAhB,EAA6BG,OAE5B,CAHN,EACyC;EAAA;EADzC,CA0BI,EAtBJX,oBAOQ,OAPR,cAOQ,iBANNA,oBAKC,OALD,EAKC;IAJCY,IAAI,EAAC,MAIN;IAHCb,KAAK,EAAC,+BAGP;+DAFUS,kBAAQK,OAElB;IADCC,EAAE,EAAC;EACJ,CALD;;EAAA,kBAGWN,kBAGL,CAPR,CAsBI,EAdAO,8DAcA,EAbJf,oBAEM,KAFN,EAEM;IAFDD,KAAK,EAAC,gCAEL;IAFuCiB,OAAK,yCAAER,iDAAF;EAE5C,CAFN,EAAiE,UAAjE,CAaI,EAVJR,oBAKM,KALN,EAKM;IAJJD,KAAK,EAAC,gCAIF;IAHHE,KAAK;MAAAgB,OAAUT;IAAV;EAGF,CALN;;EAAA,CAUI,EAJJU,UAII,CApDN,CAsDI,CAvDN","names":["class","_createElementVNode","style","role","for","_createElementBlock","_hoisted_3","_hoisted_4","_toDisplayString","$setup","length","_hoisted_6","present","type","$event","id","_createCommentVNode","onClick","color","_hoisted_9"],"sourceRoot":"","sources":["C:\\Users\\IvanEndorphin\\Documents\\GitHub\\trainer_irregular_verbs\\src\\components\\past-participle\\past-participle.vue"],"sourcesContent":["<template>\r\n  <div class=\"trainer__layout\">\r\n    <div class=\"trainer__layout-trainer\">\r\n      <p class=\"trainer__layout-trainer-question\">\r\n        What is the <br>\r\n        <span class=\"trainer__layout-trainer-question\" style=\"font-style: italic;\">\r\n          past participle\r\n        </span>\r\n        of:\r\n      </p>\r\n        <span class=\"trainer__layout-trainer-question\">\r\n        </span>\r\n      <div class=\"trainer__layout-trainer-counter\">\r\n        {{ currentWord + 1 }} of {{ randomWordArray.length }}\r\n\r\n      </div>\r\n      <div class=\"progress\">\r\n        <div\r\n          role=\"progressbar\"\r\n          class=\"progress-bar\r\n          bg-success progress-bar-striped\"\r\n          style=\"width: 5%;\"\r\n          aria-valuenow=\"5\"\r\n          aria-valuemin=\"0\"\r\n          aria-valuemax=\"100\"\r\n        >\r\n        </div>\r\n      </div>\r\n      <div class=\"trainer__layout-trainer-word\">\r\n        {{ randomWordArray[currentWord].present }}\r\n\r\n      </div>\r\n      <label for=\"trainer-input\">\r\n        <input\r\n          type=\"text\"\r\n          class=\"trainer__layout-trainer-input\"\r\n          v-model=\"myAnswer\"\r\n          id=\"trainer-input\"\r\n        >\r\n      </label>\r\n          <!-- onkeypress=\"enterKeyPressed(event)\" -->\r\n      <div class=\"trainer__layout-trainer-submit\" @click=\"checkAnswer\">\r\n        Submit\r\n      </div>\r\n      <div\r\n        class=\"trainer__layout-trainer-answer\"\r\n        :style=\"{ color:answerColor }\"\r\n      >\r\n\r\n      </div>\r\n      <div class=\"trainer__layout-trainer-dev_field\">\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport wordsArray from \"../../json/dictionary.json\";\r\nimport { onMounted, computed, ref } from 'vue'\r\n\r\nexport default {\r\n  name: 'PastParticiple',\r\n  setup() {\r\n    // const word = document.querySelector('.trainer__layout-trainer-word');\r\n    // const myAnswer = document.querySelector('.trainer__layout-trainer-input');\r\n    // const error = document.querySelector('.trainer__layout-trainer-answer');\r\n    // const wordCounter = document.querySelector('.trainer__layout-trainer-counter');\r\n    // const devField = document.querySelector('.trainer__layout-trainer-dev_field');\r\n\r\n    let randomWordArray = ref(wordsArray.slice())\r\n    let currentWord = ref(0)\r\n    let mistakeCounter = ref(0)\r\n    let mistakeArray = ref([])\r\n    let myAnswer = ref('')\r\n    let answer = ref('')\r\n    let answerColor = ref('')\r\n    let isAnswerCorrect = ref('false')\r\n\r\n\r\n    start();\r\n\r\n    function start() {\r\n      console.log('Hello');\r\n      randomizeArray();\r\n      // checkRepeat();\r\n      console.log(wordsArray)\r\n      console.log(randomWordArray.value)\r\n      changeWord();\r\n    }\r\n\r\n    function randomizeArray() {\r\n      randomWordArray.value.sort(() => Math.random() - 0.5);\r\n    }\r\n\r\n    function changeWord() {\r\n      answer.value = randomWordArray.value[currentWord.value].participle;\r\n    }\r\n\r\n    // document.addEventListener('keyup', logKey);\r\n    //   function logKey(e) {\r\n    //     if(e.code === 'Enter'){\r\n    //       devField.innerText = e.code\r\n    //       checkAnswer()\r\n\r\n    //     }\r\n    // }\r\n\r\n    function enterKeyPressed(event) {\r\n      if (event.keyCode === 13) {\r\n        console.log('Enter key is pressed');\r\n        checkAnswer();\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    function checkAnswer() {\r\n      console.log('My: ', myAnswer.value)\r\n      console.log('ans: ', answer.value)\r\n      if (myAnswer.value.toLowerCase() === answer.value) {\r\n        isAnswerCorrect = 'false';\r\n        correctAnswer();\r\n      } else {\r\n        wrongAnswer();\r\n      }\r\n      // console.log(answer.event.target.value)\r\n    }\r\n\r\n    function sleep(ms) {\r\n      return new Promise((resolve) => {\r\n        setTimeout(resolve, ms);\r\n      });\r\n    }\r\n\r\n    async function correctAnswer() {\r\n      console.log('Correct');\r\n      error.innerText = 'Correct!';\r\n      error.style.color = 'green';\r\n      await sleep(1000);\r\n      error.innerText = '';\r\n      myAnswer.value = '';\r\n      checkEndGame();\r\n    }\r\n\r\n    async function wrongAnswer() {\r\n      console.log('wrong');\r\n      answerColor.value = 'red';\r\n      mistakeCounter.value += 1;\r\n      await sleep(2000);\r\n      myAnswer.value = '';\r\n      error.innerText = '';\r\n\r\n      mistakeArray.value.push(randomWordArray[currentWord]);\r\n\r\n      checkEndGame();\r\n    }\r\n\r\n    function checkEndGame() {\r\n      currentWord.value += 1;\r\n      if (currentWord.value < randomWordArray.value.length) {\r\n        changeWord();\r\n      } else {\r\n        let correctAnswerCount = ((randomWordArray.value.length - mistakeCounter.value) * 100) / randomWordArray.value.length;\r\n        correctAnswerCount = Math.floor(correctAnswerCount);\r\n        alert(`Mistake: ${mistakeCounter.value}\\nCorrect: ${correctAnswerCount}%`);\r\n        restart();\r\n      }\r\n    }\r\n\r\n    function checkRepeat() {\r\n      let repeatCount = 0;\r\n      const repeatArray = [];\r\n      for (const word of randomWordArray) {\r\n        repeatCount = 0;\r\n        for (const wordCompare of randomWordArray) {\r\n          if (word === wordCompare) {\r\n            repeatCount += 1;\r\n            if (repeatCount > 1) {\r\n              repeatArray.push(wordCompare);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      console.log('repeat', repeatArray);\r\n    }\r\n\r\n    function restart() {\r\n      currentWord.value = 0;\r\n      mistakeCounter.value = 0;\r\n      if (mistakeArray.value.length > 0) {\r\n        randomWordArray = mistakeArray.slice();\r\n        mistakeArray = [];\r\n      } else {\r\n        randomWordArray = wordsArray.slice();\r\n      }\r\n      changeWord();\r\n    }\r\n\r\n    return {\r\n      randomWordArray,\r\n      currentWord,\r\n      myAnswer,\r\n      enterKeyPressed,\r\n      checkAnswer,\r\n      answerColor,\r\n    }\r\n\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n  @import 'past-participle.scss';\r\n</style>"]},"metadata":{},"sourceType":"module"}