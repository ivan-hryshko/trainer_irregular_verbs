{"ast":null,"code":"import dictionary from \"../../json/dictionary.json\";\nimport { onMounted, computed, ref } from 'vue';\nexport default {\n  name: 'PastParticiple',\n\n  setup() {\n    // const word = document.querySelector('.trainer__layout-trainer-word');\n    // const myAnswer = document.querySelector('.trainer__layout-trainer-input');\n    // const error = document.querySelector('.trainer__layout-trainer-answer');\n    // const wordCounter = document.querySelector('.trainer__layout-trainer-counter');\n    // const devField = document.querySelector('.trainer__layout-trainer-dev_field');\n    // let currentWord = 0;\n    // let isAnswerCorrect = 'true';\n    // let answer = 'dictionary[wordCounter].participle';\n    // let mistakeArray = [];\n    // let mistakeCounter = 0;\n    // let randomWordArray = wordsArray.slice();\n    console.log('Hello'); // start();\n\n    function start() {\n      randomizeArray(); // checkRepeat();\n\n      console.log(randomWordArray);\n      console.log(dictionary); // changeWord();\n    }\n\n    function randomizeArray() {\n      randomWordArray.sort(() => Math.random() - 0.5);\n    }\n\n    function changeWord() {\n      word.innerText = randomWordArray[currentWord].present;\n      answer = randomWordArray[currentWord].participle;\n      wordCounter.innerText = `${currentWord + 1} of ${randomWordArray.length}`;\n    } // document.addEventListener('keyup', logKey);\n    //   function logKey(e) {\n    //     if(e.code === 'Enter'){\n    //       devField.innerText = e.code\n    //       checkAnswer()\n    //     }\n    // }\n\n\n    function enterKeyPressed(event) {\n      if (event.keyCode === 13) {\n        console.log('Enter key is pressed');\n        checkAnswer();\n        return true;\n      }\n\n      return false;\n    }\n\n    function checkAnswer() {\n      console.log(myAnswer.value);\n      console.log(answer);\n\n      if (myAnswer.value.toLowerCase() === answer) {\n        isAnswerCorrect = 'false';\n        correctAnswer();\n      } else {\n        wrongAnswer();\n      } // console.log(answer.event.target.value)\n\n    }\n\n    function sleep(ms) {\n      return new Promise(resolve => {\n        setTimeout(resolve, ms);\n      });\n    }\n\n    async function correctAnswer() {\n      console.log('Correct');\n      error.innerText = 'Correct!';\n      error.style.color = 'green';\n      await sleep(1000);\n      error.innerText = '';\n      myAnswer.value = '';\n      checkEndGame();\n    }\n\n    async function wrongAnswer() {\n      console.log('wrong');\n      error.innerText = answer;\n      error.style.color = 'red';\n      mistakeCounter += 1;\n      await sleep(2000);\n      myAnswer.value = '';\n      error.innerText = '';\n      mistakeArray.push(randomWordArray[currentWord]);\n      checkEndGame();\n    }\n\n    function checkEndGame() {\n      currentWord += 1;\n\n      if (currentWord < randomWordArray.length) {\n        changeWord();\n      } else {\n        let correctAnswerCount = (randomWordArray.length - mistakeCounter) * 100 / randomWordArray.length;\n        correctAnswerCount = Math.floor(correctAnswerCount);\n        alert(`Mistake: ${mistakeCounter}\\nCorrect: ${correctAnswerCount}%`);\n        restart();\n      }\n    }\n\n    function checkRepeat() {\n      let repeatCount = 0;\n      const repeatArray = [];\n\n      for (const word of randomWordArray) {\n        repeatCount = 0;\n\n        for (const wordCompare of randomWordArray) {\n          if (word === wordCompare) {\n            repeatCount += 1;\n\n            if (repeatCount > 1) {\n              repeatArray.push(wordCompare);\n            }\n          }\n        }\n      }\n\n      console.log('repeat', repeatArray);\n    }\n\n    function restart() {\n      currentWord = 0;\n      mistakeCounter = 0;\n\n      if (mistakeArray.length > 0) {\n        randomWordArray = mistakeArray.slice();\n        mistakeArray = [];\n      } else {\n        randomWordArray = wordsArray.slice();\n      }\n\n      changeWord();\n    }\n  }\n\n};","map":{"version":3,"mappings":"AAsDA,OAAOA,UAAP,MAAuB,4BAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,GAA9B,QAAyC,KAAzC;AAEA,eAAe;EACbC,IAAI,EAAE,gBADO;;EAEbC,KAAK,GAAG;IACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IAEAC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAdM,CAgBN;;IAGA,SAASC,KAAT,GAAiB;MACfC,cAAc,GADC,CAEf;;MACAH,OAAO,CAACC,GAAR,CAAYG,eAAZ;MACAJ,OAAO,CAACC,GAAR,CAAYP,UAAZ,EAJe,CAKf;IACF;;IAEA,SAASS,cAAT,GAA0B;MACxBC,eAAe,CAACC,IAAhB,CAAqB,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAA3C;IACF;;IAEA,SAASC,UAAT,GAAsB;MACpBC,IAAI,CAACC,SAAL,GAAiBN,eAAe,CAACO,WAAD,CAAf,CAA6BC,OAA9C;MACAC,MAAK,GAAIT,eAAe,CAACO,WAAD,CAAf,CAA6BG,UAAtC;MACAC,WAAW,CAACL,SAAZ,GAAyB,GAAEC,WAAU,GAAI,CAAC,OAAOP,eAAe,CAACY,MAAO,EAAxE;IACF,CAnCM,CAqCN;IACA;IACA;IACA;IACA;IAEA;IACA;;;IAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;MAC9B,IAAIA,KAAK,CAACC,OAAN,KAAkB,EAAtB,EAA0B;QACxBnB,OAAO,CAACC,GAAR,CAAY,sBAAZ;QACAmB,WAAW;QACX,OAAO,IAAP;MACF;;MACA,OAAO,KAAP;IACF;;IAEA,SAASA,WAAT,GAAuB;MACrBpB,OAAO,CAACC,GAAR,CAAYoB,QAAQ,CAACC,KAArB;MACAtB,OAAO,CAACC,GAAR,CAAYY,MAAZ;;MACA,IAAIQ,QAAQ,CAACC,KAAT,CAAeC,WAAf,OAAiCV,MAArC,EAA6C;QAC3CW,eAAc,GAAI,OAAlB;QACAC,aAAa;MACf,CAHA,MAGO;QACLC,WAAW;MACb,CARqB,CASrB;;IACF;;IAEA,SAASC,KAAT,CAAeC,EAAf,EAAmB;MACjB,OAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;QAC9BC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAV;MACD,CAFM,CAAP;IAGF;;IAEA,eAAeH,aAAf,GAA+B;MAC7BzB,OAAO,CAACC,GAAR,CAAY,SAAZ;MACA+B,KAAK,CAACtB,SAAN,GAAkB,UAAlB;MACAsB,KAAK,CAACC,KAAN,CAAYC,KAAZ,GAAoB,OAApB;MACA,MAAMP,KAAK,CAAC,IAAD,CAAX;MACAK,KAAK,CAACtB,SAAN,GAAkB,EAAlB;MACAW,QAAQ,CAACC,KAAT,GAAiB,EAAjB;MACAa,YAAY;IACd;;IAEA,eAAeT,WAAf,GAA6B;MAC3B1B,OAAO,CAACC,GAAR,CAAY,OAAZ;MACA+B,KAAK,CAACtB,SAAN,GAAkBG,MAAlB;MACAmB,KAAK,CAACC,KAAN,CAAYC,KAAZ,GAAoB,KAApB;MACAE,cAAa,IAAK,CAAlB;MACA,MAAMT,KAAK,CAAC,IAAD,CAAX;MACAN,QAAQ,CAACC,KAAT,GAAiB,EAAjB;MACAU,KAAK,CAACtB,SAAN,GAAkB,EAAlB;MAEA2B,YAAY,CAACC,IAAb,CAAkBlC,eAAe,CAACO,WAAD,CAAjC;MAEAwB,YAAY;IACd;;IAEA,SAASA,YAAT,GAAwB;MACtBxB,WAAU,IAAK,CAAf;;MACA,IAAIA,WAAU,GAAIP,eAAe,CAACY,MAAlC,EAA0C;QACxCR,UAAU;MACZ,CAFA,MAEO;QACL,IAAI+B,kBAAiB,GAAK,CAACnC,eAAe,CAACY,MAAhB,GAAyBoB,cAA1B,IAA4C,GAA7C,GAAoDhC,eAAe,CAACY,MAA7F;QACAuB,kBAAiB,GAAIjC,IAAI,CAACkC,KAAL,CAAWD,kBAAX,CAArB;QACAE,KAAK,CAAE,YAAWL,cAAe,cAAaG,kBAAmB,GAA5D,CAAL;QACAG,OAAO;MACT;IACF;;IAEA,SAASC,WAAT,GAAuB;MACrB,IAAIC,WAAU,GAAI,CAAlB;MACA,MAAMC,WAAU,GAAI,EAApB;;MACA,KAAK,MAAMpC,IAAX,IAAmBL,eAAnB,EAAoC;QAClCwC,WAAU,GAAI,CAAd;;QACA,KAAK,MAAME,WAAX,IAA0B1C,eAA1B,EAA2C;UACzC,IAAIK,IAAG,KAAMqC,WAAb,EAA0B;YACxBF,WAAU,IAAK,CAAf;;YACA,IAAIA,WAAU,GAAI,CAAlB,EAAqB;cACnBC,WAAW,CAACP,IAAZ,CAAiBQ,WAAjB;YACF;UACF;QACF;MACF;;MACA9C,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB4C,WAAtB;IACF;;IAEA,SAASH,OAAT,GAAmB;MACjB/B,WAAU,GAAI,CAAd;MACAyB,cAAa,GAAI,CAAjB;;MACA,IAAIC,YAAY,CAACrB,MAAb,GAAsB,CAA1B,EAA6B;QAC3BZ,eAAc,GAAIiC,YAAY,CAACU,KAAb,EAAlB;QACAV,YAAW,GAAI,EAAf;MACF,CAHA,MAGO;QACLjC,eAAc,GAAI4C,UAAU,CAACD,KAAX,EAAlB;MACF;;MACAvC,UAAU;IACZ;EAEF;;AA5Ia,CAAf","names":["dictionary","onMounted","computed","ref","name","setup","console","log","start","randomizeArray","randomWordArray","sort","Math","random","changeWord","word","innerText","currentWord","present","answer","participle","wordCounter","length","enterKeyPressed","event","keyCode","checkAnswer","myAnswer","value","toLowerCase","isAnswerCorrect","correctAnswer","wrongAnswer","sleep","ms","Promise","resolve","setTimeout","error","style","color","checkEndGame","mistakeCounter","mistakeArray","push","correctAnswerCount","floor","alert","restart","checkRepeat","repeatCount","repeatArray","wordCompare","slice","wordsArray"],"sourceRoot":"","sources":["C:\\Users\\IvanEndorphin\\Documents\\GitHub\\trainer_irregular_verbs\\src\\components\\past-participle\\past-participle.vue"],"sourcesContent":["<template>\r\n  <div class=\"trainer__layout\">\r\n    <div class=\"trainer__layout-trainer\">\r\n      <p class=\"trainer__layout-trainer-question\">\r\n        What is the <br>\r\n        <span class=\"trainer__layout-trainer-question\" style=\"font-style: italic;\">\r\n          past participle\r\n        </span>\r\n        of:\r\n      </p>\r\n        <span class=\"trainer__layout-trainer-question\">\r\n        </span>\r\n      <div class=\"trainer__layout-trainer-counter\">\r\n\r\n      </div>\r\n      <div class=\"progress\">\r\n        <div\r\n          role=\"progressbar\"\r\n          class=\"progress-bar\r\n          bg-success progress-bar-striped\"\r\n          style=\"width: 5%;\"\r\n          aria-valuenow=\"5\"\r\n          aria-valuemin=\"0\"\r\n          aria-valuemax=\"100\"\r\n        >\r\n        </div>\r\n      </div>\r\n      <div class=\"trainer__layout-trainer-word\">\r\n\r\n      </div>\r\n      <label for=\"trainer-input\">\r\n        <input\r\n          type=\"text\"\r\n          class=\"trainer__layout-trainer-input\"\r\n          onkeypress=\"enterKeyPressed(event)\"\r\n          id=\"trainer-input\"\r\n        >\r\n      </label>\r\n      <div class=\"trainer__layout-trainer-submit\" onclick=\"checkAnswer()\">\r\n        Submit\r\n      </div>\r\n      <div class=\"trainer__layout-trainer-answer\">\r\n\r\n      </div>\r\n      <div class=\"trainer__layout-trainer-dev_field\">\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport dictionary from \"../../json/dictionary.json\";\r\nimport { onMounted, computed, ref } from 'vue'\r\n\r\nexport default {\r\n  name: 'PastParticiple',\r\n  setup() {\r\n    // const word = document.querySelector('.trainer__layout-trainer-word');\r\n    // const myAnswer = document.querySelector('.trainer__layout-trainer-input');\r\n    // const error = document.querySelector('.trainer__layout-trainer-answer');\r\n    // const wordCounter = document.querySelector('.trainer__layout-trainer-counter');\r\n    // const devField = document.querySelector('.trainer__layout-trainer-dev_field');\r\n    // let currentWord = 0;\r\n    // let isAnswerCorrect = 'true';\r\n    // let answer = 'dictionary[wordCounter].participle';\r\n    // let mistakeArray = [];\r\n    // let mistakeCounter = 0;\r\n    \r\n    // let randomWordArray = wordsArray.slice();\r\n\r\n    console.log('Hello');\r\n\r\n    // start();\r\n\r\n\r\n    function start() {\r\n      randomizeArray();\r\n      // checkRepeat();\r\n      console.log(randomWordArray)\r\n      console.log(dictionary)\r\n      // changeWord();\r\n    }\r\n\r\n    function randomizeArray() {\r\n      randomWordArray.sort(() => Math.random() - 0.5);\r\n    }\r\n\r\n    function changeWord() {\r\n      word.innerText = randomWordArray[currentWord].present;\r\n      answer = randomWordArray[currentWord].participle;\r\n      wordCounter.innerText = `${currentWord + 1} of ${randomWordArray.length}`;\r\n    }\r\n\r\n    // document.addEventListener('keyup', logKey);\r\n    //   function logKey(e) {\r\n    //     if(e.code === 'Enter'){\r\n    //       devField.innerText = e.code\r\n    //       checkAnswer()\r\n\r\n    //     }\r\n    // }\r\n\r\n    function enterKeyPressed(event) {\r\n      if (event.keyCode === 13) {\r\n        console.log('Enter key is pressed');\r\n        checkAnswer();\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    function checkAnswer() {\r\n      console.log(myAnswer.value);\r\n      console.log(answer);\r\n      if (myAnswer.value.toLowerCase() === answer) {\r\n        isAnswerCorrect = 'false';\r\n        correctAnswer();\r\n      } else {\r\n        wrongAnswer();\r\n      }\r\n      // console.log(answer.event.target.value)\r\n    }\r\n\r\n    function sleep(ms) {\r\n      return new Promise((resolve) => {\r\n        setTimeout(resolve, ms);\r\n      });\r\n    }\r\n\r\n    async function correctAnswer() {\r\n      console.log('Correct');\r\n      error.innerText = 'Correct!';\r\n      error.style.color = 'green';\r\n      await sleep(1000);\r\n      error.innerText = '';\r\n      myAnswer.value = '';\r\n      checkEndGame();\r\n    }\r\n\r\n    async function wrongAnswer() {\r\n      console.log('wrong');\r\n      error.innerText = answer;\r\n      error.style.color = 'red';\r\n      mistakeCounter += 1;\r\n      await sleep(2000);\r\n      myAnswer.value = '';\r\n      error.innerText = '';\r\n\r\n      mistakeArray.push(randomWordArray[currentWord]);\r\n\r\n      checkEndGame();\r\n    }\r\n\r\n    function checkEndGame() {\r\n      currentWord += 1;\r\n      if (currentWord < randomWordArray.length) {\r\n        changeWord();\r\n      } else {\r\n        let correctAnswerCount = ((randomWordArray.length - mistakeCounter) * 100) / randomWordArray.length;\r\n        correctAnswerCount = Math.floor(correctAnswerCount);\r\n        alert(`Mistake: ${mistakeCounter}\\nCorrect: ${correctAnswerCount}%`);\r\n        restart();\r\n      }\r\n    }\r\n\r\n    function checkRepeat() {\r\n      let repeatCount = 0;\r\n      const repeatArray = [];\r\n      for (const word of randomWordArray) {\r\n        repeatCount = 0;\r\n        for (const wordCompare of randomWordArray) {\r\n          if (word === wordCompare) {\r\n            repeatCount += 1;\r\n            if (repeatCount > 1) {\r\n              repeatArray.push(wordCompare);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      console.log('repeat', repeatArray);\r\n    }\r\n\r\n    function restart() {\r\n      currentWord = 0;\r\n      mistakeCounter = 0;\r\n      if (mistakeArray.length > 0) {\r\n        randomWordArray = mistakeArray.slice();\r\n        mistakeArray = [];\r\n      } else {\r\n        randomWordArray = wordsArray.slice();\r\n      }\r\n      changeWord();\r\n    }\r\n\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n  @import 'past-participle.scss';\r\n</style>"]},"metadata":{},"sourceType":"module"}