{"ast":null,"code":"export default {\n  name: 'PastParticiple',\n\n  setup() {\n    // import * as fs from 'fs';\n    const wordsArray = fs.readFileSync('./trainer_irregular_verbs.json');\n    console.log(wordsArray);\n    const word = document.querySelector('.trainer__layout-trainer-word');\n    const myAnswer = document.querySelector('.trainer__layout-trainer-input');\n    const error = document.querySelector('.trainer__layout-trainer-answer');\n    const wordCounter = document.querySelector('.trainer__layout-trainer-counter');\n    const devField = document.querySelector('.trainer__layout-trainer-dev_field');\n    let currentWord = 0;\n    let isAnswerCorrect = 'true';\n    let answer = 'dictionary[wordCounter].participle';\n    let randomWordArray = wordsArray.slice();\n    let mistakeArray = [];\n    let mistakeCounter = 0;\n    console.log('Hello');\n    start();\n\n    function start() {\n      randomizeArray();\n      checkRepeat(); // console.log(randomWordArray)\n      // console.log(dictionary)\n\n      changeWord();\n    }\n\n    function randomizeArray() {\n      randomWordArray.sort(() => Math.random() - 0.5);\n    }\n\n    function changeWord() {\n      word.innerText = randomWordArray[currentWord].present;\n      answer = randomWordArray[currentWord].participle;\n      wordCounter.innerText = `${currentWord + 1} of ${randomWordArray.length}`;\n    } // document.addEventListener('keyup', logKey);\n    //   function logKey(e) {\n    //     if(e.code === 'Enter'){\n    //       devField.innerText = e.code\n    //       checkAnswer()\n    //     }\n    // }\n\n\n    function enterKeyPressed(event) {\n      if (event.keyCode === 13) {\n        console.log('Enter key is pressed');\n        checkAnswer();\n        return true;\n      }\n\n      return false;\n    }\n\n    function checkAnswer() {\n      console.log(myAnswer.value);\n      console.log(answer);\n\n      if (myAnswer.value.toLowerCase() === answer) {\n        isAnswerCorrect = 'false';\n        correctAnswer();\n      } else {\n        wrongAnswer();\n      } // console.log(answer.event.target.value)\n\n    }\n\n    function sleep(ms) {\n      return new Promise(resolve => {\n        setTimeout(resolve, ms);\n      });\n    }\n\n    async function correctAnswer() {\n      console.log('Correct');\n      error.innerText = 'Correct!';\n      error.style.color = 'green';\n      await sleep(1000);\n      error.innerText = '';\n      myAnswer.value = '';\n      checkEndGame();\n    }\n\n    async function wrongAnswer() {\n      console.log('wrong');\n      error.innerText = answer;\n      error.style.color = 'red';\n      mistakeCounter += 1;\n      await sleep(2000);\n      myAnswer.value = '';\n      error.innerText = '';\n      mistakeArray.push(randomWordArray[currentWord]);\n      checkEndGame();\n    }\n\n    function checkEndGame() {\n      currentWord += 1;\n\n      if (currentWord < randomWordArray.length) {\n        changeWord();\n      } else {\n        let correctAnswerCount = (randomWordArray.length - mistakeCounter) * 100 / randomWordArray.length;\n        correctAnswerCount = Math.floor(correctAnswerCount);\n        alert(`Mistake: ${mistakeCounter}\\nCorrect: ${correctAnswerCount}%`);\n        restart();\n      }\n    }\n\n    function checkRepeat() {\n      let repeatCount = 0;\n      const repeatArray = [];\n\n      for (const word of randomWordArray) {\n        repeatCount = 0;\n\n        for (const wordCompare of randomWordArray) {\n          if (word === wordCompare) {\n            repeatCount += 1;\n\n            if (repeatCount > 1) {\n              repeatArray.push(wordCompare);\n            }\n          }\n        }\n      }\n\n      console.log('repeat', repeatArray);\n    }\n\n    function restart() {\n      currentWord = 0;\n      mistakeCounter = 0;\n\n      if (mistakeArray.length > 0) {\n        randomWordArray = mistakeArray.slice();\n        mistakeArray = [];\n      } else {\n        randomWordArray = wordsArray.slice();\n      }\n\n      changeWord();\n    }\n  }\n\n};","map":{"version":3,"mappings":"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","names":["name","setup","wordsArray","fs","readFileSync","console","log","word","document","querySelector","myAnswer","error","wordCounter","devField","currentWord","isAnswerCorrect","answer","randomWordArray","slice","mistakeArray","mistakeCounter","start","randomizeArray","checkRepeat","changeWord","sort","Math","random","innerText","present","participle","length","enterKeyPressed","event","keyCode","checkAnswer","value","toLowerCase","correctAnswer","wrongAnswer","sleep","ms","Promise","resolve","setTimeout","style","color","checkEndGame","push","correctAnswerCount","floor","alert","restart","repeatCount","repeatArray","wordCompare"],"sourceRoot":"","sources":["C:\\Users\\IvanEndorphin\\Documents\\GitHub\\trainer_irregular_verbs\\src\\components\\past-participle\\past-participle.vue"],"sourcesContent":["<template>\r\n  <div class=\"trainer__layout\">\r\n      <div class=\"trainer__layout-trainer\">\r\n        <p class=\"trainer__layout-trainer-question\">\r\n          What is the <br>\r\n          <span class=\"trainer__layout-trainer-question\" style=\"font-style: italic;\">\r\n            past participle\r\n          </span>\r\n          of:\r\n        </p>\r\n          <span class=\"trainer__layout-trainer-question\">\r\n          </span>\r\n        <div class=\"trainer__layout-trainer-counter\">\r\n\r\n        </div>\r\n        <div class=\"progress\">\r\n          <div\r\n            role=\"progressbar\"\r\n            class=\"progress-bar\r\n            bg-success progress-bar-striped\"\r\n            style=\"width: 5%;\"\r\n            aria-valuenow=\"5\"\r\n            aria-valuemin=\"0\"\r\n            aria-valuemax=\"100\"\r\n          >\r\n          </div>\r\n        </div>\r\n        <div class=\"trainer__layout-trainer-word\">\r\n\r\n        </div>\r\n        <label for=\"trainer-input\">\r\n          <input\r\n            type=\"text\"\r\n            class=\"trainer__layout-trainer-input\"\r\n            onkeypress=\"enterKeyPressed(event)\"\r\n            id=\"trainer-input\"\r\n          >\r\n        </label>\r\n        <div class=\"trainer__layout-trainer-submit\" onclick=\"checkAnswer()\">\r\n          Submit\r\n        </div>\r\n        <div class=\"trainer__layout-trainer-answer\">\r\n\r\n        </div>\r\n        <div class=\"trainer__layout-trainer-dev_field\">\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\n\r\nexport default {\r\n  name: 'PastParticiple',\r\n  setup() {\r\n    // import * as fs from 'fs';\r\n\r\n    const wordsArray = fs.readFileSync('./trainer_irregular_verbs.json');\r\n    console.log(wordsArray);\r\n    const word = document.querySelector('.trainer__layout-trainer-word');\r\n    const myAnswer = document.querySelector('.trainer__layout-trainer-input');\r\n    const error = document.querySelector('.trainer__layout-trainer-answer');\r\n    const wordCounter = document.querySelector('.trainer__layout-trainer-counter');\r\n    const devField = document.querySelector('.trainer__layout-trainer-dev_field');\r\n    let currentWord = 0;\r\n    let isAnswerCorrect = 'true';\r\n    let answer = 'dictionary[wordCounter].participle';\r\n    let randomWordArray = wordsArray.slice();\r\n    let mistakeArray = [];\r\n    let mistakeCounter = 0;\r\n\r\n    console.log('Hello');\r\n\r\n    start();\r\n\r\n    function start() {\r\n      randomizeArray();\r\n      checkRepeat();\r\n      // console.log(randomWordArray)\r\n      // console.log(dictionary)\r\n      changeWord();\r\n    }\r\n\r\n    function randomizeArray() {\r\n      randomWordArray.sort(() => Math.random() - 0.5);\r\n    }\r\n\r\n    function changeWord() {\r\n      word.innerText = randomWordArray[currentWord].present;\r\n      answer = randomWordArray[currentWord].participle;\r\n      wordCounter.innerText = `${currentWord + 1} of ${randomWordArray.length}`;\r\n    }\r\n\r\n    // document.addEventListener('keyup', logKey);\r\n    //   function logKey(e) {\r\n    //     if(e.code === 'Enter'){\r\n    //       devField.innerText = e.code\r\n    //       checkAnswer()\r\n\r\n    //     }\r\n    // }\r\n\r\n    function enterKeyPressed(event) {\r\n      if (event.keyCode === 13) {\r\n        console.log('Enter key is pressed');\r\n        checkAnswer();\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    function checkAnswer() {\r\n      console.log(myAnswer.value);\r\n      console.log(answer);\r\n      if (myAnswer.value.toLowerCase() === answer) {\r\n        isAnswerCorrect = 'false';\r\n        correctAnswer();\r\n      } else {\r\n        wrongAnswer();\r\n      }\r\n      // console.log(answer.event.target.value)\r\n    }\r\n\r\n    function sleep(ms) {\r\n      return new Promise((resolve) => {\r\n        setTimeout(resolve, ms);\r\n      });\r\n    }\r\n\r\n    async function correctAnswer() {\r\n      console.log('Correct');\r\n      error.innerText = 'Correct!';\r\n      error.style.color = 'green';\r\n      await sleep(1000);\r\n      error.innerText = '';\r\n      myAnswer.value = '';\r\n      checkEndGame();\r\n    }\r\n\r\n    async function wrongAnswer() {\r\n      console.log('wrong');\r\n      error.innerText = answer;\r\n      error.style.color = 'red';\r\n      mistakeCounter += 1;\r\n      await sleep(2000);\r\n      myAnswer.value = '';\r\n      error.innerText = '';\r\n\r\n      mistakeArray.push(randomWordArray[currentWord]);\r\n\r\n      checkEndGame();\r\n    }\r\n\r\n    function checkEndGame() {\r\n      currentWord += 1;\r\n      if (currentWord < randomWordArray.length) {\r\n        changeWord();\r\n      } else {\r\n        let correctAnswerCount = ((randomWordArray.length - mistakeCounter) * 100) / randomWordArray.length;\r\n        correctAnswerCount = Math.floor(correctAnswerCount);\r\n        alert(`Mistake: ${mistakeCounter}\\nCorrect: ${correctAnswerCount}%`);\r\n        restart();\r\n      }\r\n    }\r\n\r\n    function checkRepeat() {\r\n      let repeatCount = 0;\r\n      const repeatArray = [];\r\n      for (const word of randomWordArray) {\r\n        repeatCount = 0;\r\n        for (const wordCompare of randomWordArray) {\r\n          if (word === wordCompare) {\r\n            repeatCount += 1;\r\n            if (repeatCount > 1) {\r\n              repeatArray.push(wordCompare);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      console.log('repeat', repeatArray);\r\n    }\r\n\r\n    function restart() {\r\n      currentWord = 0;\r\n      mistakeCounter = 0;\r\n      if (mistakeArray.length > 0) {\r\n        randomWordArray = mistakeArray.slice();\r\n        mistakeArray = [];\r\n      } else {\r\n        randomWordArray = wordsArray.slice();\r\n      }\r\n      changeWord();\r\n    }\r\n\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n  @import 'past-participle.scss';\r\n</style>"]},"metadata":{},"sourceType":"module"}