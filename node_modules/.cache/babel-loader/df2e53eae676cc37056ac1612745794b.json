{"ast":null,"code":"import wordsArray from \"../../json/dictionary.json\";\nimport { onMounted, computed, ref } from 'vue';\nexport default {\n  name: 'PastParticiple',\n\n  setup() {\n    // const word = document.querySelector('.trainer__layout-trainer-word');\n    // const myAnswer = document.querySelector('.trainer__layout-trainer-input');\n    // const error = document.querySelector('.trainer__layout-trainer-answer');\n    // const wordCounter = document.querySelector('.trainer__layout-trainer-counter');\n    // const devField = document.querySelector('.trainer__layout-trainer-dev_field');\n    let randomWordArray = ref(wordsArray.slice());\n    let currentWord = ref(0);\n    let mistakeCounter = ref(0);\n    let mistakeArray = ref([]);\n    let myAnswer = ref('');\n    let answer = ref('');\n    let answerColor = ref('');\n    let isAnswerCorrect = ref('false');\n    let isAnswerShown = ref('false');\n    start();\n\n    function start() {\n      console.log('Hello');\n      randomizeArray(); // checkRepeat();\n\n      console.log(wordsArray);\n      console.log(randomWordArray.value);\n      changeWord();\n    }\n\n    function randomizeArray() {\n      randomWordArray.value.sort(() => Math.random() - 0.5);\n    }\n\n    function changeWord() {\n      answer.value = randomWordArray.value[currentWord.value].participle;\n    } // document.addEventListener('keyup', logKey);\n    //   function logKey(e) {\n    //     if(e.code === 'Enter'){\n    //       devField.innerText = e.code\n    //       checkAnswer()\n    //     }\n    // }\n\n\n    function enterKeyPressed(event) {\n      if (event.keyCode === 13) {\n        console.log('Enter key is pressed');\n        checkAnswer();\n        return true;\n      }\n\n      return false;\n    }\n\n    function checkAnswer() {\n      console.log('My: ', myAnswer.value);\n      console.log('ans: ', answer.value);\n\n      if (myAnswer.value.toLowerCase() === answer.value) {\n        isAnswerCorrect = 'false';\n        correctAnswer();\n      } else {\n        wrongAnswer();\n      } // console.log(answer.event.target.value)\n\n    }\n\n    function sleep(ms) {\n      return new Promise(resolve => {\n        setTimeout(resolve, ms);\n      });\n    }\n\n    async function correctAnswer() {\n      console.log('Correct');\n      answe = 'Correct!';\n      error.style.color = 'green';\n      await sleep(1000);\n      error.innerText = '';\n      myAnswer.value = '';\n      checkEndGame();\n    }\n\n    async function wrongAnswer() {\n      console.log('wrong');\n      answerColor.value = 'red';\n      isAnswerShown.value = 'true';\n      mistakeCounter.value += 1;\n      await sleep(2000);\n      isAnswerShown.value = 'false';\n      myAnswer.value = '';\n      mistakeArray.value.push(randomWordArray.value[currentWord]);\n      checkEndGame();\n    }\n\n    function checkEndGame() {\n      currentWord.value += 1;\n\n      if (currentWord.value < randomWordArray.value.length) {\n        changeWord();\n      } else {\n        let correctAnswerCount = (randomWordArray.value.length - mistakeCounter.value) * 100 / randomWordArray.value.length;\n        correctAnswerCount = Math.floor(correctAnswerCount);\n        alert(`Mistake: ${mistakeCounter.value}\\nCorrect: ${correctAnswerCount}%`);\n        restart();\n      }\n    }\n\n    function checkRepeat() {\n      let repeatCount = 0;\n      const repeatArray = [];\n\n      for (const word of randomWordArray) {\n        repeatCount = 0;\n\n        for (const wordCompare of randomWordArray) {\n          if (word === wordCompare) {\n            repeatCount += 1;\n\n            if (repeatCount > 1) {\n              repeatArray.push(wordCompare);\n            }\n          }\n        }\n      }\n\n      console.log('repeat', repeatArray);\n    }\n\n    function restart() {\n      currentWord.value = 0;\n      mistakeCounter.value = 0;\n\n      if (mistakeArray.value.length > 0) {\n        randomWordArray.value = mistakeArray.value.slice();\n        mistakeArray.value = [];\n      } else {\n        randomWordArray.value = wordsArray.slice();\n      }\n\n      changeWord();\n    }\n\n    return {\n      randomWordArray,\n      currentWord,\n      myAnswer,\n      enterKeyPressed,\n      checkAnswer,\n      answerColor,\n      showAnswer: isAnswerShown,\n      answer\n    };\n  }\n\n};","map":{"version":3,"mappings":"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","names":["wordsArray","onMounted","computed","ref","name","setup","randomWordArray","slice","currentWord","mistakeCounter","mistakeArray","myAnswer","answer","answerColor","isAnswerCorrect","isAnswerShown","start","console","log","randomizeArray","value","changeWord","sort","Math","random","participle","enterKeyPressed","event","keyCode","checkAnswer","toLowerCase","correctAnswer","wrongAnswer","sleep","ms","Promise","resolve","setTimeout","answe","error","style","color","innerText","checkEndGame","push","length","correctAnswerCount","floor","alert","restart","checkRepeat","repeatCount","repeatArray","word","wordCompare","showAnswer"],"sourceRoot":"","sources":["C:\\Users\\IvanEndorphin\\Documents\\GitHub\\trainer_irregular_verbs\\src\\components\\past-participle\\past-participle.vue"],"sourcesContent":["<template>\r\n  <div class=\"trainer__layout\">\r\n    <div class=\"trainer__layout-trainer\">\r\n      <p class=\"trainer__layout-trainer-question\">\r\n        What is the <br>\r\n        <span class=\"trainer__layout-trainer-question\" style=\"font-style: italic;\">\r\n          past participle\r\n        </span>\r\n        of:\r\n      </p>\r\n        <span class=\"trainer__layout-trainer-question\">\r\n        </span>\r\n      <div class=\"trainer__layout-trainer-counter\">\r\n        {{ currentWord + 1 }} of {{ randomWordArray.length }}\r\n\r\n      </div>\r\n      <div class=\"progress\">\r\n        <div\r\n          role=\"progressbar\"\r\n          class=\"progress-bar\r\n          bg-success progress-bar-striped\"\r\n          style=\"width: 5%;\"\r\n          aria-valuenow=\"5\"\r\n          aria-valuemin=\"0\"\r\n          aria-valuemax=\"100\"\r\n        >\r\n        </div>\r\n      </div>\r\n      <div class=\"trainer__layout-trainer-word\">\r\n        {{ randomWordArray[currentWord].present }}\r\n\r\n      </div>\r\n      <label for=\"trainer-input\">\r\n        <input\r\n          type=\"text\"\r\n          class=\"trainer__layout-trainer-input\"\r\n          v-model=\"myAnswer\"\r\n          id=\"trainer-input\"\r\n        >\r\n      </label>\r\n          <!-- onkeypress=\"enterKeyPressed(event)\" -->\r\n      <div class=\"trainer__layout-trainer-submit\" @click=\"checkAnswer\">\r\n        Submit\r\n      </div>\r\n      <div\r\n        class=\"trainer__layout-trainer-answer\"\r\n        :style=\"{ color:answerColor }\"\r\n        v-if=\"showAnswer\"\r\n      >\r\n        {{ answer }}\r\n\r\n      </div>\r\n      <div class=\"trainer__layout-trainer-dev_field\">\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport wordsArray from \"../../json/dictionary.json\";\r\nimport { onMounted, computed, ref } from 'vue'\r\n\r\nexport default {\r\n  name: 'PastParticiple',\r\n  setup() {\r\n    // const word = document.querySelector('.trainer__layout-trainer-word');\r\n    // const myAnswer = document.querySelector('.trainer__layout-trainer-input');\r\n    // const error = document.querySelector('.trainer__layout-trainer-answer');\r\n    // const wordCounter = document.querySelector('.trainer__layout-trainer-counter');\r\n    // const devField = document.querySelector('.trainer__layout-trainer-dev_field');\r\n\r\n    let randomWordArray = ref(wordsArray.slice())\r\n    let currentWord = ref(0)\r\n    let mistakeCounter = ref(0)\r\n    let mistakeArray = ref([])\r\n    let myAnswer = ref('')\r\n    let answer = ref('')\r\n    let answerColor = ref('')\r\n    let isAnswerCorrect = ref('false')\r\n    let isAnswerShown = ref('false')\r\n\r\n\r\n    start();\r\n\r\n    function start() {\r\n      console.log('Hello');\r\n      randomizeArray();\r\n      // checkRepeat();\r\n      console.log(wordsArray)\r\n      console.log(randomWordArray.value)\r\n      changeWord();\r\n    }\r\n\r\n    function randomizeArray() {\r\n      randomWordArray.value.sort(() => Math.random() - 0.5);\r\n    }\r\n\r\n    function changeWord() {\r\n      answer.value = randomWordArray.value[currentWord.value].participle;\r\n    }\r\n\r\n    // document.addEventListener('keyup', logKey);\r\n    //   function logKey(e) {\r\n    //     if(e.code === 'Enter'){\r\n    //       devField.innerText = e.code\r\n    //       checkAnswer()\r\n\r\n    //     }\r\n    // }\r\n\r\n    function enterKeyPressed(event) {\r\n      if (event.keyCode === 13) {\r\n        console.log('Enter key is pressed');\r\n        checkAnswer();\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    function checkAnswer() {\r\n      console.log('My: ', myAnswer.value)\r\n      console.log('ans: ', answer.value)\r\n      if (myAnswer.value.toLowerCase() === answer.value) {\r\n        isAnswerCorrect = 'false';\r\n        correctAnswer();\r\n      } else {\r\n        wrongAnswer();\r\n      }\r\n      // console.log(answer.event.target.value)\r\n    }\r\n\r\n    function sleep(ms) {\r\n      return new Promise((resolve) => {\r\n        setTimeout(resolve, ms);\r\n      });\r\n    }\r\n\r\n    async function correctAnswer() {\r\n      console.log('Correct');\r\n      answe = 'Correct!';\r\n      error.style.color = 'green';\r\n      await sleep(1000);\r\n      error.innerText = '';\r\n      myAnswer.value = '';\r\n      checkEndGame();\r\n    }\r\n\r\n    async function wrongAnswer() {\r\n      console.log('wrong');\r\n      answerColor.value = 'red';\r\n      isAnswerShown.value = 'true'\r\n      mistakeCounter.value += 1;\r\n      await sleep(2000);\r\n      isAnswerShown.value = 'false'\r\n      myAnswer.value = '';\r\n      mistakeArray.value.push(randomWordArray.value[currentWord]);\r\n\r\n      checkEndGame();\r\n    }\r\n\r\n    function checkEndGame() {\r\n      currentWord.value += 1;\r\n      if (currentWord.value < randomWordArray.value.length) {\r\n        changeWord();\r\n      } else {\r\n        let correctAnswerCount = ((randomWordArray.value.length - mistakeCounter.value) * 100) / randomWordArray.value.length;\r\n        correctAnswerCount = Math.floor(correctAnswerCount);\r\n        alert(`Mistake: ${mistakeCounter.value}\\nCorrect: ${correctAnswerCount}%`);\r\n        restart();\r\n      }\r\n    }\r\n\r\n    function checkRepeat() {\r\n      let repeatCount = 0;\r\n      const repeatArray = [];\r\n      for (const word of randomWordArray) {\r\n        repeatCount = 0;\r\n        for (const wordCompare of randomWordArray) {\r\n          if (word === wordCompare) {\r\n            repeatCount += 1;\r\n            if (repeatCount > 1) {\r\n              repeatArray.push(wordCompare);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      console.log('repeat', repeatArray);\r\n    }\r\n\r\n    function restart() {\r\n      currentWord.value = 0;\r\n      mistakeCounter.value = 0;\r\n      if (mistakeArray.value.length > 0) {\r\n        randomWordArray.value = mistakeArray.value.slice();\r\n        mistakeArray.value = [];\r\n      } else {\r\n        randomWordArray.value = wordsArray.slice();\r\n      }\r\n      changeWord();\r\n    }\r\n\r\n    return {\r\n      randomWordArray,\r\n      currentWord,\r\n      myAnswer,\r\n      enterKeyPressed,\r\n      checkAnswer,\r\n      answerColor,\r\n      showAnswer: isAnswerShown,\r\n      answer,\r\n    }\r\n\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n  @import 'past-participle.scss';\r\n</style>"]},"metadata":{},"sourceType":"module"}